import React from 'react';

const LowStockInvoice = ({ lowStockItems, onClose }) => {
  const printInvoice = () => {
    window.print();
  };

  const totalValue = lowStockItems.reduce((sum, item) => 
    sum + ((item.stock || 0) * (item.price || 0)), 0
  );

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex justify-between items-center mb-6 print:hidden">
            <h2 className="text-2xl font-bold">Low Stock Invoice</h2>
            <div className="flex gap-2">
              <button
                onClick={printInvoice}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
              >
                Print
              </button>
              <button
                onClick={onClose}
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600"
              >
                Close
              </button>
            </div>
          </div>
          
          {/* Invoice Content */}
          <div className="print:p-0" id="invoice-content">
            <div className="border-2 border-black p-6 bg-white">
              {/* Header */}
              <div className="text-center mb-6">
                <h1 className="text-3xl font-bold mb-2">ASHOKA HOTEL</h1>
                <p className="text-lg">Low Stock Inventory Report</p>
                <p className="text-sm text-gray-600">Date: {new Date().toLocaleDateString()}</p>
                <p className="text-sm text-gray-600">Time: {new Date().toLocaleTimeString()}</p>
              </div>

              {/* Invoice Details */}
              <div className="mb-6">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p><strong>Report Type:</strong> Low Stock Items</p>
                    <p><strong>Total Items:</strong> {lowStockItems.length}</p>
                  </div>
                  <div>
                    <p><strong>Generated By:</strong> Pantry Management</p>
                    <p><strong>Status:</strong> Requires Restocking</p>
                  </div>
                </div>
              </div>

              {/* Items Table */}
              <table className="w-full border-collapse border border-black mb-6">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="border border-black p-2 text-left">S.No</th>
                    <th className="border border-black p-2 text-left">Item Name</th>
                    <th className="border border-black p-2 text-left">Category</th>
                    <th className="border border-black p-2 text-left">Current Stock</th>
                    <th className="border border-black p-2 text-left">Unit</th>
                    <th className="border border-black p-2 text-left">Price/Unit</th>
                    <th className="border border-black p-2 text-left">Total Value</th>
                  </tr>
                </thead>
                <tbody>
                  {lowStockItems.map((item, index) => (
                    <tr key={item._id}>
                      <td className="border border-black p-2">{index + 1}</td>
                      <td className="border border-black p-2">{item.name}</td>
                      <td className="border border-black p-2">
                        {typeof item.category === 'object' ? item.category?.name || 'N/A' : item.category || 'N/A'}
                      </td>
                      <td className="border border-black p-2 text-center text-red-600 font-bold">
                        {item.stock || 0}
                      </td>
                      <td className="border border-black p-2">{item.unit || 'pcs'}</td>
                      <td className="border border-black p-2 text-right">₹{(item.price || 0).toFixed(2)}</td>
                      <td className="border border-black p-2 text-right">
                        ₹{((item.stock || 0) * (item.price || 0)).toFixed(2)}
                      </td>
                    </tr>
                  ))}
                </tbody>
                <tfoot>
                  <tr className="bg-gray-100 font-bold">
                    <td colSpan="6" className="border border-black p-2 text-right">Total Value:</td>
                    <td className="border border-black p-2 text-right">
                      ₹{totalValue.toFixed(2)}
                    </td>
                  </tr>
                </tfoot>
              </table>

              {/* Summary */}
              <div className="mb-6">
                <h3 className="text-lg font-bold mb-2">Summary</h3>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <p>• Items requiring immediate restocking: {lowStockItems.length}</p>
                    <p>• Current inventory value: ₹{totalValue.toFixed(2)}</p>
                  </div>
                  <div>
                    <p>• Action required: Purchase/Restock</p>
                    <p>• Priority: High</p>
                  </div>
                </div>
              </div>

              {/* Footer */}
              <div className="text-center mt-6 pt-4 border-t border-black">
                <p className="text-sm text-gray-600">This is a system generated report</p>
                <p className="text-sm text-gray-600">Ashoka Hotel - Pantry Management System</p>
                <p className="text-xs text-gray-500 mt-2">
                  Report generated on {new Date().toLocaleString()}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        @media print {
          body * {
            visibility: hidden;
          }
          #invoice-content, #invoice-content * {
            visibility: visible;
          }
          #invoice-content {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
          }
          .print\\:hidden {
            display: none !important;
          }
          .print\\:p-0 {
            padding: 0 !important;
          }
        }
      `}</style>
    </div>
  );
};

export default LowStockInvoice;